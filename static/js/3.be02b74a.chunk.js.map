{"version":3,"sources":["components/Chat/Chat.module.css","../node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js","../node_modules/@material-ui/core/esm/internal/svg-icons/Person.js","../node_modules/@material-ui/core/esm/utils/createSvgIcon.js","../node_modules/@material-ui/core/esm/Avatar/Avatar.js","components/Chat/ChatPage.tsx"],"names":["module","exports","SvgIcon","React","props","ref","children","classes","className","_props$color","color","_props$component","component","Component","_props$fontSize","fontSize","htmlColor","titleAccess","_props$viewBox","viewBox","other","_objectWithoutProperties","_extends","clsx","root","concat","capitalize","focusable","undefined","role","muiName","withStyles","theme","userSelect","width","height","display","fill","flexShrink","typography","pxToRem","transition","transitions","create","duration","shorter","colorPrimary","palette","primary","main","colorSecondary","secondary","colorAction","action","active","colorError","error","colorDisabled","disabled","fontSizeInherit","fontSizeSmall","fontSizeLarge","name","createSvgIcon","path","displayName","createElement","memo","forwardRef","d","Avatar","alt","childrenProp","imgProps","sizes","src","srcSet","_props$variant","variant","loaded","_ref","_React$useState","setLoaded","image","Image","onload","onerror","useLoaded","hasImg","hasImgNotFailing","img","Person","fallback","system","colorDefault","position","alignItems","justifyContent","fontFamily","lineHeight","borderRadius","overflow","background","default","backgroundColor","type","grey","circle","circular","rounded","shape","square","textAlign","objectFit","textIndent","Messages","wsChannel","useState","messages","setMessages","useRef","useEffect","messageHandler","e","newMessage","JSON","parse","data","prevMessages","current","scrollTop","scrollHeight","addEventListener","removeEventListener","s","map","m","index","Message","message","userId","userName","photo","charAt","toUpperCase","slice","messageWrap","messageInfo","style","flex","Date","toLocaleDateString","to","AddMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","formGroup","onKeyPress","key","send","placeholder","textarea","value","onChange","currentTarget","SuperButton","marginRight","onClick","compose","WithAuthRedirect","setWsChannel","ws","closeHandler","setTimeout","createChannel","close","WebSocket","document","title","chatWrap"],"mappings":"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","file":"static/js/3.be02b74a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatWrap\":\"Chat_chatWrap__1GcB4\",\"messageWrap\":\"Chat_messageWrap__PM9sM\",\"messageInfo\":\"Chat_messageInfo__1I8G5\",\"message\":\"Chat_message__1Zp3J\",\"messages\":\"Chat_messages__3HRKs\",\"formGroup\":\"Chat_formGroup__3KlkX\",\"textarea\":\"Chat_textarea__axVsH\"};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      userSelect: 'none',\n      width: '1em',\n      height: '1em',\n      display: 'inline-block',\n      fill: 'currentColor',\n      flexShrink: 0,\n      fontSize: theme.typography.pxToRem(24),\n      transition: theme.transitions.create('fill', {\n        duration: theme.transitions.duration.shorter\n      })\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"action\"`. */\n    colorAction: {\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `color=\"disabled\"`. */\n    colorDisabled: {\n      color: theme.palette.action.disabled\n    },\n\n    /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n    fontSizeInherit: {\n      fontSize: 'inherit'\n    },\n\n    /* Styles applied to the root element if `fontSize=\"small\"`. */\n    fontSizeSmall: {\n      fontSize: theme.typography.pxToRem(20)\n    },\n\n    /* Styles applied to the root element if `fontSize=\"large\"`. */\n    fontSizeLarge: {\n      fontSize: theme.typography.pxToRem(35)\n    }\n  };\n};\nvar SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'inherit' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'svg' : _props$component,\n      _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,\n      htmlColor = props.htmlColor,\n      titleAccess = props.titleAccess,\n      _props$viewBox = props.viewBox,\n      viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"fontSize\", \"htmlColor\", \"titleAccess\", \"viewBox\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], fontSize !== 'default' && classes[\"fontSize\".concat(capitalize(fontSize))]),\n    focusable: \"false\",\n    viewBox: viewBox,\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref\n  }, other), children, titleAccess ? /*#__PURE__*/React.createElement(\"title\", null, titleAccess) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   */\n  color: PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['default', 'inherit', 'large', 'small']),\n\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this property.\n   */\n  shapeRendering: PropTypes.string,\n\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   */\n  viewBox: PropTypes.string\n} : void 0;\nSvgIcon.muiName = 'SvgIcon';\nexport default withStyles(styles, {\n  name: 'MuiSvgIcon'\n})(SvgIcon);","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n}), 'Person');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../SvgIcon';\n/**\n * Private module reserved for @material-ui/x packages.\n */\n\nexport default function createSvgIcon(path, displayName) {\n  var Component = function Component(props, ref) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      ref: ref\n    }, props), path);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {},\n\n    /* Styles applied to the root element if `variant=\"circular\"`. */\n    circular: {},\n\n    /* Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"square\"`. */\n    square: {\n      borderRadius: 0\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover',\n      // Hide alt text.\n      color: 'transparent',\n      // Hide the image broken icon, only works on Chrome.\n      textIndent: 10000\n    },\n\n    /* Styles applied to the fallback icon */\n    fallback: {\n      width: '75%',\n      height: '75%'\n    }\n  };\n};\n\nfunction useLoaded(_ref) {\n  var src = _ref.src,\n      srcSet = _ref.srcSet;\n\n  var _React$useState = React.useState(false),\n      loaded = _React$useState[0],\n      setLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    var active = true;\n    var image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return function () {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nvar Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'circle' : _props$variant,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  var children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  var loaded = useLoaded({\n    src: src,\n    srcSet: srcSet\n  });\n  var hasImg = src || srcSet;\n  var hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = /*#__PURE__*/React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = /*#__PURE__*/React.createElement(Person, {\n      className: classes.fallback\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'circular', 'rounded', 'square'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","import React, {MutableRefObject, RefObject, useEffect, useRef, useState} from 'react';\r\nimport s from './Chat.module.css'\r\nimport SuperButton from \"../common/Button/SuperButton\";\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport logo from \"../Users/img/logo2.png\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport Dialogs from \"../Dialogs/Dialogs\";\r\n\r\n\r\ntype ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\ntype WsChannelType = {\r\n    wsChannel: WebSocket | null\r\n}\r\n\r\nfunction ChatPage() {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n\r\n        //в removeEventListener нужно передавать ту же функци, что и в addEventListener - поэтому выносим в отдельную переменную\r\n        const closeHandler = () => {\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n\r\n        function createChannel() {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            ws.addEventListener('close', closeHandler)\r\n            setWsChannel(ws)\r\n        }\r\n\r\n        createChannel()\r\n\r\n        return () => {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        document.title = 'Chat'\r\n    }, [])\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.chatWrap}>\r\n            <Messages wsChannel={wsChannel}/>\r\n            <AddMessageForm wsChannel={wsChannel}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction Messages({wsChannel}: WsChannelType) {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n    let ref = useRef<HTMLDivElement | null>(null)\r\n\r\n    useEffect(() => {\r\n\r\n        const messageHandler = (e: MessageEvent) => {\r\n            let newMessage = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessage])\r\n\r\n            //авто скролл вниз\r\n            if (ref && ref.current) ref.current.scrollTop = ref.current.scrollHeight;\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n\r\n    }, [wsChannel])\r\n\r\n\r\n    return (\r\n        <div ref={ref} className={s.messages}>\r\n            {messages.map((m, index) => <Message\r\n                key={index} message={m.message} userId={m.userId}\r\n                userName={m.userName} photo={m.photo}/>)}\r\n        </div>\r\n     )\r\n }\r\n\r\n\r\n function Message(props:ChatMessageType) {\r\n\r\n     let message = props.message.charAt(0).toUpperCase() + props.message.slice(1)\r\n\r\n     return (\r\n         <div className={s.messageWrap}>\r\n             <div className={s.messageInfo}>\r\n                 <p style={{flex: '1'}}> {props.userName}</p>\r\n                 <p> {new Date().toLocaleDateString()}</p>\r\n             </div>\r\n\r\n             <div className={s.message}>\r\n                 <NavLink to={'/profile/' + props.userId}>\r\n                     <Avatar src={props.photo}/>\r\n                 </NavLink>\r\n                 <p> {message}</p>\r\n             </div>\r\n\r\n         </div>\r\n     );\r\n }\r\n\r\nfunction AddMessageForm({wsChannel}: WsChannelType) {\r\n    const [message, setMessage] = useState('')\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    useEffect(() => {\r\n        const openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n\r\n        wsChannel?.addEventListener('open', openHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n\r\n    }, [wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if (!message) return;\r\n\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    const sendMessageByKey = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (!message) return;\r\n\r\n        if (e?.key === 'Enter') {\r\n            wsChannel?.send(message)\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return <div className={s.formGroup}>\r\n        <textarea onKeyPress={sendMessageByKey} placeholder={'Enter your message'} className={s.textarea}\r\n                  value={message} onChange={(e) => {\r\n            setMessage(e.currentTarget.value)\r\n        }}/>\r\n        <SuperButton style={{marginRight: '40px'}} disabled={readyStatus !== 'ready'}\r\n                     onClick={sendMessage}>Send </SuperButton>\r\n    </div>;\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(WithAuthRedirect)(ChatPage)\r\n"],"sourceRoot":""}