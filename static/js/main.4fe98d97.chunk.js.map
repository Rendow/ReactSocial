{"version":3,"sources":["Components/Users/Users.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Header/Header.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/Profile.module.css","Components/Navbar/Navbar.module.css","Components/common/Preloader/Preloader.module.css","Redux/sidebar-reducer.tsx","Redux/dialogs-reducer.tsx","Redux/propfile-reducer.tsx","Redux/users-reducer.ts","Redux/redux-store.tsx","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/Profile/MyPosts/Post/img.webp","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Users/img/logo.png","Components/Users/Users.tsx","Components/common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","App.tsx","index.tsx","Components/Dialogs/Dialogs.module.css"],"names":["module","exports","initialState","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogs","id","name","messages","newMessageBody","UPDATE_NEW_POST","ADD_POST","posts","likesCount","newPostText","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","users","pageSize","totalUsersCount","currentPage","isFetching","rootReducer","combineReducers","sidebar","state","dialogsPage","action","type","body","Date","getTime","profilePage","newPost","newText","usersPage","map","u","userID","followed","totalCount","store","createStore","Header","className","classes","header","logo","Navbar","nav","item","to","activeClassName","active","Post","props","content","img","src","Logo","alt","message","like","MyPosts","PostsElements","post","newPostElement","React","createRef","postBlock","onChange","event","text","currentTarget","value","ref","onClick","MyPostsContainer","connect","dispatch","updateNewPostCreator","ProfileInfo","descriptionBlock","description","Profile","s","News","Music","Settings","DialogItem","path","dialog","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","updateNewMessageBody","sendMessage","DialogsContainer","updateNewMessageCreator","Users","selectedPage","pagination","pagesCount","Math","ceil","pages","i","push","wrap","photos","small","photo","unfollow","follow","status","p","onPageChanged","Preloader","ldsDualRing","UsersContainer","pageNumber","setCurrentPage","toggleIsFetching","axios","get","then","response","setUsers","data","items","this","setTotalUsersCount","Component","page","count","App","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fe98d97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Users_wrap__1FBbp\",\"photo\":\"Users_photo__1nnq1\",\"pagination\":\"Users_pagination__o7o7S\",\"selectedPage\":\"Users_selectedPage__TkLP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3DGyO\",\"img\":\"Post_img__kHxfE\",\"message\":\"Post_message__3QPS7\",\"like\":\"Post_like__1Xkw_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__1DqSy\",\"item\":\"MyPosts_item__WB3A_\",\"posts\":\"MyPosts_posts__aBbYw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1SEQZ\",\"logo\":\"Header_logo__VwJNW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1J6dA\",\"description\":\"ProfileInfo_description__1e9aD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2BDJ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3IHOI\",\"item\":\"Navbar_item__3-xYg\",\"active\":\"Navbar_active__ItIae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsDualRing\":\"Preloader_ldsDualRing__2Kbfv\"};","let initialState = {}\r\n\r\n\r\nexport const sidebarReducer = (state:any = initialState,action:any) => {\r\n\r\n    return state\r\n\r\n}\r\n","\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY'\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\n\r\nexport type MessagesType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DispatchType = UpdateNewMessageBodyActionType | SendMessageActionType\r\n\r\ntype UpdateNewMessageBodyActionType = ReturnType<typeof updateNewMessageCreator>\r\ntype SendMessageActionType = ReturnType<typeof sendMessageCreator>\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Anya'},\r\n        {id: 4, name: 'Sveta'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'How are you?'},\r\n        {id: 3, messages: 'Good'},\r\n    ] as MessagesType[],\r\n    newMessageBody:''\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DispatchType):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n\r\n            return {...state,\r\n                newMessageBody: action.body}\r\n\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody\r\n            return {...state,\r\n                newMessageBody: '',\r\n                messages:[...state.messages,{id: new Date().getTime(), messages: body}]}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageCreator = () => {\r\n   return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n}\r\nexport const updateNewMessageCreator = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY, body: text\r\n    } as const\r\n}","const UPDATE_NEW_POST = 'UPDATE-NEW-POST-TEXT';\r\nconst ADD_POST = 'ADD-POST';\r\n\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    messages: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    posts: PostsType[]\r\n    newPostText: string\r\n}\r\nexport type DispatchType = AddPostActionType | UpdatePostActionType\r\ntype AddPostActionType = ReturnType<typeof addPostCreator>\r\ntype UpdatePostActionType = ReturnType<typeof updateNewPostCreator>\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            messages: 'Hi,how are you?',\r\n            likesCount: 11,\r\n        },\r\n        {\r\n            id: 2,\r\n            messages: 'its my first posts',\r\n            likesCount: 41,\r\n        },\r\n\r\n    ],\r\n    newPostText:''\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: DispatchType):ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                messages: state.newPostText,\r\n                likesCount: 0,\r\n            }\r\n\r\n            return {...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case UPDATE_NEW_POST:\r\n            return {...state,\r\n                newPostText: action.newText\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPostCreator = () => {\r\n   return {\r\n        type: ADD_POST\r\n    } as const\r\n}\r\nexport const updateNewPostCreator = (text: string)=> {\r\n    return {\r\n        type: UPDATE_NEW_POST, newText: text\r\n    }as const\r\n}","const FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\n\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    photoUrl: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    location: {\r\n        city: string\r\n        country: string\r\n    }\r\n}\r\n\r\n\r\nexport type DispatchType = FollowActionType | UnFollowActionType | SetUsersActionType | setCurrentPageActionType | setUsersTotalCountActionType | setIsFetchingACActionType\r\n\r\ntype FollowActionType = ReturnType<typeof follow>\r\ntype UnFollowActionType = ReturnType<typeof unfollow>\r\ntype SetUsersActionType = ReturnType<typeof setUsers>\r\ntype setCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\ntype setUsersTotalCountActionType = ReturnType<typeof setTotalUsersCount>\r\ntype setIsFetchingACActionType = ReturnType<typeof toggleIsFetching>\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching:false,\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching:boolean\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: DispatchType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: [...action.users]}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (id: number) => {\r\n    return {\r\n        type: FOLLOW, userID: id\r\n    } as const\r\n}\r\n\r\nexport const unfollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW, userID: id\r\n    } as const\r\n}\r\nexport const setUsers = (users: UsersType[]) => {\r\n    return {\r\n        type: SET_USERS, users: users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE, currentPage: page\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (count: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT, totalCount: count\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING, isFetching\r\n    } as const\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./propfile-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    sidebar: sidebarReducer,\r\n    dialogsPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport type ReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer)\r\n\r\n\r\n\r\nexport default store","import React from \"react\";\r\nimport classes from './Header.module.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.logo}></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './Navbar.module.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to='/profile'  activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/dialogs' activeClassName={classes.active}> Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/users' activeClassName={classes.active}> Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/news' activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/music' activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/settings' activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar;","export default __webpack_public_path__ + \"static/media/img.1c5b1442.webp\";","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\nimport Logo from './img.webp';\r\n\r\ntype PostType = {\r\n    message:string\r\n    like:number\r\n}\r\n\r\nfunction Post(props:PostType) {\r\n\r\n    return (\r\n\r\n        <div className={classes.content}>\r\n\r\n                <div className={classes.img}><img src={Logo} alt=\"\"/></div>\r\n                <div className={classes.message}> {props.message}</div>\r\n                <div className={classes.like}>like {props.like}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsMapDispatchToPropsType, MyPostsMapStateToPropsType} from \"./MyPostsContainer\";\r\n\r\n\r\nexport type MyPostsPropsType = MyPostsMapStateToPropsType & MyPostsMapDispatchToPropsType\r\n\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n\r\n     let PostsElements =\r\n        props.posts.map (post => <Post message={post.messages} like={post.likesCount} />)\r\n\r\n     let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    const onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = event.currentTarget.value\r\n        props.onChange(text);\r\n    }\r\n    let addPost = () => {\r\n        props.onClick()\r\n    }\r\n    return (\r\n        <div className={classes.content}>\r\n\r\n            <div className={classes.postBlock}>\r\n                <div>\r\n                    <h4>My publications</h4>\r\n                </div>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange}\r\n                        value={props.newPostText}\r\n                        ref={newPostElement}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}> Publish</button>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {PostsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostCreator, PostsType, updateNewPostCreator} from \"../../../Redux/propfile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type MyPostsMapStateToPropsType = {\r\n    posts:PostsType[]\r\n    newPostText:string\r\n}\r\nexport  type MyPostsMapDispatchToPropsType = {\r\n    onChange:(text:string) => void\r\n    onClick:() => void\r\n}\r\nconst mapStateToProps = (state:ReduxStateType):MyPostsMapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch):MyPostsMapDispatchToPropsType => {\r\n    return {\r\n        onClick: () => {\r\n            dispatch(addPostCreator())\r\n        },\r\n        onChange: (text: string) => {\r\n            let action = updateNewPostCreator(text);\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Logo from './../MyPosts/Post/img.webp';\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src=\"https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <div><img src={Logo} alt=\"\"/></div>\r\n                <div className={classes.description}>  Hello! Nice to meet you on my page. There is will be description about my page. You should wait for this.</div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport s from './Profile.module.css'\r\n\r\n\r\nfunction Profile() {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport classes from './News.module.css'\r\n\r\nfunction News  () {\r\n    return (\r\n        <div >\r\n           news\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News"," import React from 'react';\r\nimport classes from './Music.module.css'\r\n\r\nfunction Music  () {\r\n    return (\r\n        <div >\r\n      music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\nimport classes from './Settings.module.css'\r\n\r\nfunction Settings  () {\r\n    return (\r\n        <div >\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\nfunction DialogItem(props: DialogItemType) {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}> {props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessageType = {\r\n    message:string\r\n}\r\n\r\nfunction Message(props: MessageType) {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from './Message/Message';\r\nimport {DialogsMapDispatchToPropsType, DialogsMapStateToPropsType} from \"./DialogsContainer\";\r\n\r\n\r\ntype DialogType = DialogsMapStateToPropsType & DialogsMapDispatchToPropsType\r\n\r\nfunction Dialogs(props: DialogType) {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(message => <Message key={message.id} message={message.messages}/>)\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    let newMessageBody = props.dialogsPage.newMessageBody\r\n\r\n    let updateNewMessageBody = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = event.currentTarget.value\r\n        props.updateNewMessageBody(text)\r\n    }\r\n    let sendMessage = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div>\r\n                    <div>\r\n                    <textarea\r\n                        onChange={updateNewMessageBody}\r\n                        value={newMessageBody}\r\n                        ref={newPostElement}> </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={sendMessage}> Send message</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {InitialStateType, sendMessageCreator, updateNewMessageCreator} from '../../Redux/dialogs-reducer';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type DialogsMapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\nexport type DialogsMapDispatchToPropsType = {\r\n    updateNewMessageBody:(text:string) => void\r\n    sendMessage:() => void\r\n}\r\nconst mapStateToProps = (state:ReduxStateType):DialogsMapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch):DialogsMapDispatchToPropsType => {\r\n    return {\r\n     updateNewMessageBody: (text:string) => {\r\n         let action = updateNewMessageCreator(text);\r\n         dispatch(action)\r\n     },\r\n        sendMessage: () => {\r\n           dispatch(sendMessageCreator())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.ef2c408a.png\";","import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport logo from \"./img/logo.png\";\r\nimport {UsersType} from \"../../Redux/users-reducer\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n\r\n}\r\n\r\n\r\nexport const Users = (props:UsersPropsType) => {\r\n\r\n    let selectedPage = s.selectedPage + ' ' + s.pagination\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages:number[] = []\r\n\r\n    for (let i = 1;i <= pagesCount ;i++){\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.users.map(u => <div className={s.wrap} key={u.id}>\r\n                <span>\r\n                    <div>\r\n                    <img src={u.photos.small != null ? u.photos.small : logo} className={s.photo}/>\r\n                </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\r\n                            : <button onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div> {u.name}</div>\r\n                        <div> {u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                         <div>{'u.location.country'}</div>\r\n                         <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n\r\n            <div>\r\n                {pages.map(p => {\r\n                    return  p <15 && <span className={props.currentPage === p ? selectedPage : s.pagination}\r\n                                           onClick={()=>{props.onPageChanged(p)}}>\r\n                       {p} </span>  })}\r\n            </div>\r\n        </div>\r\n\r\n)}","import s from \"./Preloader.module.css\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return <div className={s.ldsDualRing}></div>\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    follow,\r\n    setCurrentPage, toggleIsFetching,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../Redux/users-reducer\";\r\nimport axios from \"axios\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    isFetching:boolean\r\n}\r\nexport type dispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: UsersType[]) => void\r\n    setCurrentPage: (page: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching:(isFetching:boolean) => void\r\n}\r\n\r\ntype UsersPropsType = mapStateToPropsType & dispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component <UsersPropsType,{}>{\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount);\r\n            })\r\n    }\r\n    onPageChanged = (pageNumber:number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response =>{\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render(){\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : ''}\r\n            <Users\r\n            totalUsersCount={this.props.totalUsersCount}\r\n            pageSize={this.props.pageSize}\r\n            currentPage={this.props.currentPage}\r\n            onPageChanged={this.onPageChanged}\r\n            users={this.props.users}\r\n            follow={this.props.follow}\r\n            unfollow={this.props.unfollow}\r\n        />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxStateType):mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch):dispatchToPropsType => {\r\n//  return {\r\n//      follow: (userId:number) => {\r\n//          dispatch(followAC(userId))\r\n//      },\r\n//      unfollow: (userId:number) => {\r\n//          dispatch(unfollowAC(userId))\r\n//      },\r\n//      setUsers: (users: UsersType[]) => {\r\n//          dispatch(setUsersAC(users))\r\n//      },\r\n//      setCurrentPage: (page: number) => {\r\n//          dispatch(setCurrentPageAC(page))\r\n//      },\r\n//      setTotalUsersCount: (totalCount: number) => {\r\n//          dispatch(setUsersTotalCountAC(totalCount))\r\n//      },\r\n//      toggleIsFetching: (isFetching:boolean) => {\r\n//          dispatch(setIsFetchingAC(isFetching))\r\n//      }\r\n//\r\n//  }\r\n// }\r\n\r\nexport default connect(mapStateToProps, {follow, unfollow, setUsers,\r\n    setCurrentPage, setTotalUsersCount, toggleIsFetching})(UsersContainer)\r\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Components/Header/Header\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Profile from \"./Components/Profile/Profile\";\nimport {Route} from \"react-router-dom\";\nimport News from './Components/News/News';\nimport Music from './Components/Music/Music';\nimport Settings from \"./Components/Settings/Settings\";\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\n\n\n\nfunction App() {\n\n\n    return (\n\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/news' render={() => <News/>}/>\n                    <Route path='/music' render={() => <Music/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                </div>\n            </div>\n\n    );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport './index.css';\nimport store from './Redux/redux-store';\nimport ReactDOM from \"react-dom\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <Provider store={store}>\n                <App/>\n                </Provider>\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__Wwmq0\",\"dialogsItems\":\"Dialogs_dialogsItems__k-GXX\",\"active\":\"Dialogs_active__1JhBv\",\"dialog\":\"Dialogs_dialog__11cD9\",\"messages\":\"Dialogs_messages__3zY0R\"};"],"sourceRoot":""}